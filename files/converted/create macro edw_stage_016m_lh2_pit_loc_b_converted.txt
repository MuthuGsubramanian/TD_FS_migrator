CREATE OR REPLACE PROCEDURE "EDW_STAGE_016"."M_LH2_PIT_LOC_B"()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
STRICT
EXECUTE AS OWNER// CREATE/CHANGE LOG : 
// DATE                  MOD BY                               GCC                           DESC
2020-01-09              TD_SF_Engine                          initial                      macro
//     **********************************************************************************************

AS
 $$
try {var_sql_merge_base = `merge into edw_target.lh2_pit_loc_b as tgt 
using 
( 
	select  
	stg.orig_src_id ,  
	stg.site_code ,  
	stg.pit_loc_id ,  
	stg.dbprevious ,  
	stg.dbnext ,  
	stg.dbversion ,  
	coalesce(stg.pit_dbname,' ') as pit_dbname ,  
	stg.dbkey ,  
	coalesce(stg.fieldid,' ') as fieldid ,  
	stg.fieldpit ,  
	stg.fieldregion ,  
	stg.fieldblendrec ,  
	stg.fieldpath ,  
	stg.fieldbean ,  
	stg.fieldinvbean ,  
	stg.fieldhaul ,  
	stg.fieldore ,  
	stg.fielddumpfeed ,  
	stg.fielddumpcapy ,  
	stg.fieldbinsize ,  
	stg.fieldxloc ,  
	stg.fieldyloc ,  
	stg.fieldpathix ,  
	stg.fieldtimedump ,  
	stg.fieldzloc ,  
	stg.fieldsignid ,  
	stg.fieldunit ,  
	stg.fieldload ,  
	stg.fieldistiedown ,  
	stg.fieldstatus ,  
	stg.fieldlinestat ,  
	stg.fieldspillage ,  
	stg.fieldsignpost ,  
	stg.fieldshoptype ,  
	stg.fielddumpqueue ,  
	stg.fieldpctcapy ,  
	stg.fieldbays ,  
	stg.fieldnopenalty ,  
	stg.fieldtimelast ,  
	stg.fieldradius ,  
	stg.fieldgpstype ,  
	stg.fieldreason ,  
	stg.fieldivtrec ,  
	stg.fieldtdset ,  
	stg.fieldprior ,  
	stg.fieldavailbays ,  
	stg.fieldparkqueue ,  
	stg.fieldbcntime ,  
	stg.fieldtagdate ,  
	coalesce(stg.fieldtageqmt,' ') as fieldtageqmt ,  
	stg.fieldtrucksenroute ,  
	stg.fieldlastassign ,  
	stg.fieldlastarrive ,  
	stg.fieldspeedtrap ,  
	stg.fieldlvsproxcnt ,  
	stg.fieldlaststattime ,  
	stg.fieldignunexarr ,  
	coalesce(stg.fieldmetadata,' ') as fieldmetadata ,  
	stg.fielddisablearrchk ,  
	stg.dw_logical_delete_flag ,  
	stg.dw_modify_ts ,  
	stg.dw_load_ts   
	from   edw_stage_016.lh2_pit_loc as stg 
) as stg 
on ( stg.site_code = tgt.site_code and 
stg.fieldid = tgt.fieldid)

when matched then 
update set 
	orig_src_id =  stg.orig_src_id , 
	pit_loc_id = stg.pit_loc_id ,
	dbprevious =  stg.dbprevious , 
	dbnext =  stg.dbnext , 
	dbversion =  stg.dbversion , 
	pit_dbname =  stg.pit_dbname , 
	dbkey =  stg.dbkey , 
	fieldpit =  stg.fieldpit , 
	fieldregion =  stg.fieldregion , 
	fieldblendrec =  stg.fieldblendrec , 
	fieldpath =  stg.fieldpath , 
	fieldbean =  stg.fieldbean , 
	fieldinvbean =  stg.fieldinvbean , 
	fieldhaul =  stg.fieldhaul , 
	fieldore =  stg.fieldore , 
	fielddumpfeed =  stg.fielddumpfeed , 
	fielddumpcapy =  stg.fielddumpcapy , 
	fieldbinsize =  stg.fieldbinsize , 
	fieldxloc =  stg.fieldxloc , 
	fieldyloc =  stg.fieldyloc , 
	fieldpathix =  stg.fieldpathix , 
	fieldtimedump =  stg.fieldtimedump , 
	fieldzloc =  stg.fieldzloc , 
	fieldsignid =  stg.fieldsignid , 
	fieldunit =  stg.fieldunit , 
	fieldload =  stg.fieldload , 
	fieldistiedown =  stg.fieldistiedown , 
	fieldstatus =  stg.fieldstatus , 
	fieldlinestat =  stg.fieldlinestat , 
	fieldspillage =  stg.fieldspillage , 
	fieldsignpost =  stg.fieldsignpost , 
	fieldshoptype =  stg.fieldshoptype , 
	fielddumpqueue =  stg.fielddumpqueue , 
	fieldpctcapy =  stg.fieldpctcapy , 
	fieldbays =  stg.fieldbays , 
	fieldnopenalty =  stg.fieldnopenalty , 
	fieldtimelast =  stg.fieldtimelast , 
	fieldradius =  stg.fieldradius , 
	fieldgpstype =  stg.fieldgpstype , 
	fieldreason =  stg.fieldreason , 
	fieldivtrec =  stg.fieldivtrec , 
	fieldtdset =  stg.fieldtdset , 
	fieldprior =  stg.fieldprior , 
	fieldavailbays =  stg.fieldavailbays , 
	fieldparkqueue =  stg.fieldparkqueue , 
	fieldbcntime =  stg.fieldbcntime , 
	fieldtagdate =  stg.fieldtagdate , 
	fieldtageqmt =  stg.fieldtageqmt , 
	fieldtrucksenroute =  stg.fieldtrucksenroute , 
	fieldlastassign =  stg.fieldlastassign , 
	fieldlastarrive =  stg.fieldlastarrive , 
	fieldspeedtrap =  stg.fieldspeedtrap , 
	fieldlvsproxcnt =  stg.fieldlvsproxcnt , 
	fieldlaststattime =  stg.fieldlaststattime , 
	fieldignunexarr =  stg.fieldignunexarr , 
	fieldmetadata =  stg.fieldmetadata , 
	fielddisablearrchk =  stg.fielddisablearrchk , 
	dw_logical_delete_flag =  stg.dw_logical_delete_flag , 
	dw_modify_ts =  stg.dw_modify_ts 

when not matched then 
insert values (
	stg.orig_src_id , 
	stg.site_code , 
	stg.pit_loc_id , 
	stg.dbprevious , 
	stg.dbnext , 
	stg.dbversion , 
	stg.pit_dbname , 
	stg.dbkey , 
	stg.fieldid , 
	stg.fieldpit , 
	stg.fieldregion , 
	stg.fieldblendrec , 
	stg.fieldpath , 
	stg.fieldbean , 
	stg.fieldinvbean , 
	stg.fieldhaul , 
	stg.fieldore , 
	stg.fielddumpfeed , 
	stg.fielddumpcapy , 
	stg.fieldbinsize , 
	stg.fieldxloc , 
	stg.fieldyloc , 
	stg.fieldpathix , 
	stg.fieldtimedump , 
	stg.fieldzloc , 
	stg.fieldsignid , 
	stg.fieldunit , 
	stg.fieldload , 
	stg.fieldistiedown , 
	stg.fieldstatus , 
	stg.fieldlinestat , 
	stg.fieldspillage , 
	stg.fieldsignpost , 
	stg.fieldshoptype , 
	stg.fielddumpqueue , 
	stg.fieldpctcapy , 
	stg.fieldbays , 
	stg.fieldnopenalty , 
	stg.fieldtimelast , 
	stg.fieldradius , 
	stg.fieldgpstype , 
	stg.fieldreason , 
	stg.fieldivtrec , 
	stg.fieldtdset , 
	stg.fieldprior , 
	stg.fieldavailbays , 
	stg.fieldparkqueue , 
	stg.fieldbcntime , 
	stg.fieldtagdate , 
	stg.fieldtageqmt , 
	stg.fieldtrucksenroute , 
	stg.fieldlastassign , 
	stg.fieldlastarrive , 
	stg.fieldspeedtrap , 
	stg.fieldlvsproxcnt , 
	stg.fieldlaststattime , 
	stg.fieldignunexarr , 
	stg.fieldmetadata , 
	stg.fielddisablearrchk , 
	stg.dw_logical_delete_flag , 
	stg.dw_modify_ts , 
	stg.dw_load_ts
';

snowflake.execute( {sqlText: var_sql_merge_base + ";"} ); 


var_sql_logical_delete_capture = 'update edw_target.lh2_pit_loc_b as tgt
set dw_logical_delete_flag ='Y',
    	dw_modify_ts =  (select max(dw_modify_ts)  set edw_stage_016 .lh2_pit_loc)
 from edw_stage_016 .lh2_pit_loc)
where 
tgt.dw_logical_delete_flag <>  'Y' 
and not exists 
      (
      select 1
      from edw_stage_016.lh2_pit_loc as stg
      where  stg.site_code = tgt.site_code and  
      coalesce(stg.fieldid,' ') = tgt.fieldid
      )
and  exists 
     (
     select 1
     from edw_stage_016.lh2_pit_loc as stg
     where  stg.site_code = tgt.site_code
     );
);
where  stg.site_code = tgt.site_code
     );
);
`
snowflake.execute( {sqlText: var_sql_logical_delete_capture + ";"} ); 

 }
catch (err)
     {
     return "Failed: " + err;   
     }
     $$;