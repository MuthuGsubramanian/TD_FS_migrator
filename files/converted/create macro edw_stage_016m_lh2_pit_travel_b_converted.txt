CREATE OR REPLACE PROCEDURE "EDW_STAGE_016"."M_LH2_PIT_TRAVEL_B"()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
STRICT
EXECUTE AS OWNER// CREATE/CHANGE LOG : 
// DATE                  MOD BY                               GCC                           DESC
2020-01-09              TD_SF_Engine                          initial                      macro
//     **********************************************************************************************

AS
 $$
try {var_sql_merge_base = `merge into edw_target.lh2_pit_travel_b as tgt 
using 
( 
select  
 stg.orig_src_id ,  
 stg.site_code ,  
 stg.pit_travel_id ,  
 stg.dbprevious ,  
 stg.dbnext ,  
 stg.dbversion ,  
 coalesce(stg.pit_dbname,' ') as pit_dbname ,  
 stg.dbkey ,  
 coalesce(stg.fieldid,' ') as fieldid ,  
 stg.fieldlocstart ,  
 stg.fieldlocend ,  
 stg.fielddist ,  
 stg.fieldtimeempty ,  
 stg.fieldtimeloaded ,  
 stg.fieldclosed ,  
 stg.fieldfactor ,  
 coalesce(stg.fieldstreet,' ') as fieldstreet ,  
 stg.fieldresist ,  
 stg.dw_logical_delete_flag ,  
 stg.dw_modify_ts ,  
 stg.dw_load_ts   
from   edw_stage_016.lh2_pit_travel as stg 
) as stg 
on ( stg.site_code = tgt.site_code  
and stg.fieldlocstart = tgt.fieldlocstart
and stg.fieldlocend = tgt.fieldlocend)

when matched then 
update set 
 orig_src_id =  stg.orig_src_id , 
 pit_travel_id = stg.pit_travel_id,
 dbprevious =  stg.dbprevious , 
 dbnext =  stg.dbnext , 
 dbversion =  stg.dbversion , 
 pit_dbname =  stg.pit_dbname , 
 dbkey =  stg.dbkey , 
 fieldid =  stg.fieldid , 
 fielddist =  stg.fielddist , 
 fieldtimeempty =  stg.fieldtimeempty , 
 fieldtimeloaded =  stg.fieldtimeloaded , 
 fieldclosed =  stg.fieldclosed , 
 fieldfactor =  stg.fieldfactor , 
 fieldstreet =  stg.fieldstreet , 
 fieldresist =  stg.fieldresist , 
 dw_logical_delete_flag =  stg.dw_logical_delete_flag , 
 dw_modify_ts =  stg.dw_modify_ts 

when not matched then 
insert values (
  stg.orig_src_id , 
  stg.site_code , 
  stg.pit_travel_id , 
  stg.dbprevious , 
  stg.dbnext , 
  stg.dbversion , 
  stg.pit_dbname , 
  stg.dbkey , 
  stg.fieldid , 
  stg.fieldlocstart , 
  stg.fieldlocend , 
  stg.fielddist , 
  stg.fieldtimeempty , 
  stg.fieldtimeloaded , 
  stg.fieldclosed , 
  stg.fieldfactor , 
  stg.fieldstreet , 
  stg.fieldresist , 
  stg.dw_logical_delete_flag , 
  stg.dw_modify_ts , 
  stg.dw_load_ts
';

snowflake.execute( {sqlText: var_sql_merge_base + ";"} ); 


var_sql_logical_delete_capture = 'update edw_target.lh2_pit_travel_b as tgt
set dw_logical_delete_flag ='Y',
    	dw_modify_ts =  (select max(dw_modify_ts)  set edw_stage_016 .lh2_pit_travel)
 from edw_stage_016 .lh2_pit_travel)
where 
tgt.dw_logical_delete_flag <>  'Y' 
and not exists 
        (
        select 'X'
        from edw_stage_016.lh2_pit_travel as stg
        where  stg.site_code = tgt.site_code and  
        stg.fieldlocstart = tgt.fieldlocstart and
        stg.fieldlocend = tgt.fieldlocend
        ) 
and  exists 
        (
        select 'X'
        from edw_stage_016.lh2_pit_travel as stg
        where  stg.site_code = tgt.site_code 
        ) ;        
);
where  stg.site_code = tgt.site_code 
        ) ;        
);
`
snowflake.execute( {sqlText: var_sql_logical_delete_capture + ";"} ); 

 }
catch (err)
     {
     return "Failed: " + err;   
     }
     $$;