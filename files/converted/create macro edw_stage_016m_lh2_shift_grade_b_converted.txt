CREATE OR REPLACE PROCEDURE "EDW_STAGE_016"."M_LH2_SHIFT_GRADE_B"()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
STRICT
EXECUTE AS OWNER// CREATE/CHANGE LOG : 
// DATE                  MOD BY                               GCC                           DESC
2020-01-09              TD_SF_Engine                          initial                      macro
//     **********************************************************************************************

AS
 $$
try {var_sql_merge_base = `merge into edw_target.lh2_shift_grade_b as tgt 
using 
( 
select  
 stg.orig_src_id ,  
 stg.site_code ,  
 stg.shift_grade_id ,  
 to_date(trim(substr(cast (stg.shiftid as varchar(30)),1,length(cast (stg.shiftid as varchar(30)))-3)),'yymmdd') as shiftdate ,  
 stg.dbprevious ,  
 stg.dbnext ,  
 stg.dbversion ,  
 stg.shiftid ,  
 coalesce(stg.shift_dbname,' ') as shift_dbname ,  
 stg.dbkey ,  
 coalesce(stg.fieldid,' ') as fieldid ,  
 stg.fieldloc ,  
 stg.fielddump ,  
 stg.fieldinv ,  
 stg.fieldspgr ,  
 stg.fieldload ,  
 stg.fieldblend ,  
 stg.fielddensity ,  
 stg.fieldthickness ,  
 stg.fieldshot ,  
 coalesce(stg.fieldproperty,' ') as fieldproperty ,  
 stg.src_change_id ,  
 stg.dw_logical_delete_flag ,  
 stg.dw_modify_ts ,  
 stg.dw_load_ts   
from   edw_stage_016.lh2_shift_grade as stg  
left outer join pddw.lh2_shift_info shift_info
on (stg.site_code = shift_info.site_code and 
stg.shiftid = shift_info.shiftid )   
where stg.change_type in ('I','U')
) as stg 
on ( stg.site_code = tgt.site_code and 
stg.shift_grade_id = tgt.shift_grade_id 
and stg.shiftid = tgt.shiftid )

when matched then 
update set 
 orig_src_id =  stg.orig_src_id , 
 shiftdate =  stg.shiftdate , 
 dbprevious =  stg.dbprevious , 
 dbnext =  stg.dbnext , 
 dbversion =  stg.dbversion , 
 shift_dbname =  stg.shift_dbname , 
 dbkey =  stg.dbkey , 
 fieldid =  stg.fieldid , 
 fieldloc =  stg.fieldloc , 
 fielddump =  stg.fielddump , 
 fieldinv =  stg.fieldinv , 
 fieldspgr =  stg.fieldspgr , 
 fieldload =  stg.fieldload , 
 fieldblend =  stg.fieldblend , 
 fielddensity =  stg.fielddensity , 
 fieldthickness =  stg.fieldthickness , 
 fieldshot =  stg.fieldshot , 
 fieldproperty =  stg.fieldproperty , 
 src_change_id =  stg.src_change_id , 
 dw_logical_delete_flag =  stg.dw_logical_delete_flag , 
 dw_modify_ts =  stg.dw_modify_ts 

when not matched then 
insert values (
  stg.orig_src_id , 
  stg.site_code , 
  stg.shift_grade_id , 
  stg.shiftdate , 
  stg.dbprevious , 
  stg.dbnext , 
  stg.dbversion , 
  stg.shiftid , 
  stg.shift_dbname , 
  stg.dbkey , 
  stg.fieldid , 
  stg.fieldloc , 
  stg.fielddump , 
  stg.fieldinv , 
  stg.fieldspgr , 
  stg.fieldload , 
  stg.fieldblend , 
  stg.fielddensity , 
  stg.fieldthickness , 
  stg.fieldshot , 
  stg.fieldproperty , 
  stg.src_change_id , 
  stg.dw_logical_delete_flag , 
  stg.dw_modify_ts , 
  stg.dw_load_ts
';

snowflake.execute( {sqlText: var_sql_merge_base + ";"} ); 


var_sql_logical_delete_capture = 'update  edw_target.lh2_shift_grade_b  
set 
dw_logical_delete_flag = stg.dw_logical_delete_flag , 
dw_modify_ts = stg. dw_modify_ts 
 from 
( select stg.site_code , 
stg.shift_grade_id ,   
case  when stg.change_type in('D')     then
                      case 
                      when shift_info.shiftdate<(current_date-170) then 'A' 
                      else 'Y' ---handles  regular delete 
                      end               
    else 'U'---- for change type not in (i,u,d)
end as dw_logical_delete_flag,
stg.dw_modify_ts,  
stg.change_type 
from edw_stage_016.lh2_shift_grade stg 
left outer join pddw.lh2_shift_info shift_info
on (stg.site_code = shift_info.site_code and 
cast(substr(trim(stg.shift_grade_id),1,9) as integer) = shift_info.shiftid) 
) as stg 
where 
stg.site_code = edw_target.lh2_shift_grade_b.site_code and  
stg.shift_grade_id = edw_target.lh2_shift_grade_b.shift_grade_id
and  stg.change_type ='D' ;
);
`
snowflake.execute( {sqlText: var_sql_logical_delete_capture + ";"} ); 

 }
catch (err)
     {
     return "Failed: " + err;   
     }
     $$;