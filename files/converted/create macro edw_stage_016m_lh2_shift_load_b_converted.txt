CREATE OR REPLACE PROCEDURE "EDW_STAGE_016"."M_LH2_SHIFT_LOAD_B"()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
STRICT
EXECUTE AS OWNER// CREATE/CHANGE LOG : 
// DATE                  MOD BY                               GCC                           DESC
2020-01-09              TD_SF_Engine                          initial                      macro
//     **********************************************************************************************

AS
 $$
try {var_sql_merge_base = `merge into edw_target.lh2_shift_load_b as tgt 
using 
( 
select  
 stg.orig_src_id ,  
 stg.site_code ,  
 stg.shift_load_id ,  
 to_date(trim(substr(cast (stg.shiftid as varchar(30)),1,length(cast (stg.shiftid as varchar(30)))-3)),'yymmdd') as shiftdate ,  
 stg.dbprevious ,  
 stg.dbnext ,  
 stg.dbversion ,  
 stg.shiftid ,  
 coalesce(stg.shift_dbname,' ') as shift_dbname ,  
 stg.dbkey ,  
 coalesce(stg.fieldid,' ') as fieldid ,  
 stg.fieldtruck ,  
 stg.fieldexcav ,  
 stg.fieldgrade ,  
 stg.fieldloc ,  
 stg.fielddumprec ,  
 stg.fieldtons ,  
 stg.fieldtimearrive ,  
dateadd('second', stg.fieldtimearrive, shift_info.shiftstartdatetime) as stg.fieldtimearrive_ts ,
 stg.fieldtimeload ,  
dateadd('second', stg.fieldtimeload, shift_info.shiftstartdatetime) as stg.fieldtimeload_ts ,
 stg.fieldtimefull ,  
dateadd('second', stg.fieldtimefull, shift_info.shiftstartdatetime) as stg.fieldtimefull_ts ,
 stg.fieldcalctravtime ,  
dateadd('second', stg.fieldcalctravtime, shift_info.shiftstartdatetime) as stg.fieldcalctravtime_ts ,
 stg.fieldload ,  
 stg.fieldextraload ,  
 stg.fieldloadtype ,  
 stg.fielddist ,  
 stg.fieldefh ,  
 stg.fieldtoper ,  
 stg.fieldeoper ,  
 coalesce(stg.fieldorigasn,' ') as fieldorigasn ,  
 coalesce(stg.fieldreasnby,' ') as fieldreasnby ,  
 stg.fieldpathtravtime ,  
 coalesce(stg.fieldlocactlc,' ') as fieldlocactlc ,  
 stg.fieldlocacttp ,  
 coalesce(stg.fieldlocactrl,' ') as fieldlocactrl ,  
 stg.fieldfirstdipper ,  
 stg.fieldlastdipper ,  
 stg.fieldbktcnt ,  
 coalesce(stg.fieldpandhbucketloads,' ') as fieldpandhbucketloads ,  
 stg.fieldaudit ,  
 stg.fieldweightst ,  
 stg.fieldweightmeas ,  
 stg.fieldmeasuretime ,  
 stg.fieldgpsxtkl ,  
 stg.fieldgpsytkl ,  
 stg.fieldgpsxex ,  
 stg.fieldgpsyex ,  
 stg.fieldgpsstatex ,  
 stg.fieldgpsstattk ,  
 stg.fieldgpsheadtk ,  
 stg.fieldgpsveltk ,  
 coalesce(stg.fieldpvs3id,' ') as fieldpvs3id ,  
 stg.fieldbktsum ,  
 stg.fielddumpasn ,  
 stg.fieldlsizetons ,  
 coalesce(stg.fieldlsizeid,' ') as fieldlsizeid ,  
 stg.fieldlsizeversion ,  
 stg.fieldlsizedb ,  
 stg.fieldfuelremain ,  
 stg.fieldfactapply ,  
 coalesce(stg.fielddlock,' ') as fielddlock ,  
 coalesce(stg.fieldelock,' ') as fieldelock ,  
 coalesce(stg.fieldedlock,' ') as fieldedlock ,  
 coalesce(stg.fieldrlock,' ') as fieldrlock ,  
 stg.fieldreconstat ,  
 stg.fieldtimearrivemobile ,  
 stg.fieldtimeloadmobile ,  
 stg.fieldtimefullmobile ,  
 stg.src_change_id ,  
 stg.dw_logical_delete_flag ,  
 stg.dw_modify_ts ,  
 stg.dw_load_ts   
from   edw_stage_016.lh2_shift_load as stg  
	left outer join pddw.lh2_shift_info shift_info
	on (stg.site_code = shift_info.site_code and 
	stg.shiftid = shift_info.shiftid )   where stg.change_type in ('I','U')
) as stg 
on ( stg.site_code = tgt.site_code and 
stg.shift_load_id = tgt.shift_load_id and 
stg.shiftid = tgt.shiftid and  
stg.shiftdate =  tgt.shiftdate )

when matched then 
update set 
 orig_src_id =  stg.orig_src_id , 
 dbprevious =  stg.dbprevious , 
 dbnext =  stg.dbnext , 
 dbversion =  stg.dbversion , 
 shift_dbname =  stg.shift_dbname , 
 dbkey =  stg.dbkey , 
 fieldid =  stg.fieldid , 
 fieldtruck =  stg.fieldtruck , 
 fieldexcav =  stg.fieldexcav , 
 fieldgrade =  stg.fieldgrade , 
 fieldloc =  stg.fieldloc , 
 fielddumprec =  stg.fielddumprec , 
 fieldtons =  stg.fieldtons , 
 fieldtimearrive =  stg.fieldtimearrive , 
 fieldtimearrive_ts =  stg.fieldtimearrive_ts , 
 fieldtimeload =  stg.fieldtimeload , 
 fieldtimeload_ts =  stg.fieldtimeload_ts , 
 fieldtimefull =  stg.fieldtimefull , 
 fieldtimefull_ts =  stg.fieldtimefull_ts , 
 fieldcalctravtime =  stg.fieldcalctravtime , 
 fieldcalctravtime_ts =  stg.fieldcalctravtime_ts , 
 fieldload =  stg.fieldload , 
 fieldextraload =  stg.fieldextraload , 
 fieldloadtype =  stg.fieldloadtype , 
 fielddist =  stg.fielddist , 
 fieldefh =  stg.fieldefh , 
 fieldtoper =  stg.fieldtoper , 
 fieldeoper =  stg.fieldeoper , 
 fieldorigasn =  stg.fieldorigasn , 
 fieldreasnby =  stg.fieldreasnby , 
 fieldpathtravtime =  stg.fieldpathtravtime , 
 fieldlocactlc =  stg.fieldlocactlc , 
 fieldlocacttp =  stg.fieldlocacttp , 
 fieldlocactrl =  stg.fieldlocactrl , 
 fieldfirstdipper =  stg.fieldfirstdipper , 
 fieldlastdipper =  stg.fieldlastdipper , 
 fieldbktcnt =  stg.fieldbktcnt , 
 fieldpandhbucketloads =  stg.fieldpandhbucketloads , 
 fieldaudit =  stg.fieldaudit , 
 fieldweightst =  stg.fieldweightst , 
 fieldweightmeas =  stg.fieldweightmeas , 
 fieldmeasuretime =  stg.fieldmeasuretime , 
 fieldgpsxtkl =  stg.fieldgpsxtkl , 
 fieldgpsytkl =  stg.fieldgpsytkl , 
 fieldgpsxex =  stg.fieldgpsxex , 
 fieldgpsyex =  stg.fieldgpsyex , 
 fieldgpsstatex =  stg.fieldgpsstatex , 
 fieldgpsstattk =  stg.fieldgpsstattk , 
 fieldgpsheadtk =  stg.fieldgpsheadtk , 
 fieldgpsveltk =  stg.fieldgpsveltk , 
 fieldpvs3id =  stg.fieldpvs3id , 
 fieldbktsum =  stg.fieldbktsum , 
 fielddumpasn =  stg.fielddumpasn , 
 fieldlsizetons =  stg.fieldlsizetons , 
 fieldlsizeid =  stg.fieldlsizeid , 
 fieldlsizeversion =  stg.fieldlsizeversion , 
 fieldlsizedb =  stg.fieldlsizedb , 
 fieldfuelremain =  stg.fieldfuelremain , 
 fieldfactapply =  stg.fieldfactapply , 
 fielddlock =  stg.fielddlock , 
 fieldelock =  stg.fieldelock , 
 fieldedlock =  stg.fieldedlock , 
 fieldrlock =  stg.fieldrlock , 
 fieldreconstat =  stg.fieldreconstat , 
 fieldtimearrivemobile =  stg.fieldtimearrivemobile , 
 fieldtimeloadmobile =  stg.fieldtimeloadmobile , 
 fieldtimefullmobile =  stg.fieldtimefullmobile , 
 src_change_id =  stg.src_change_id , 
 dw_logical_delete_flag =  stg.dw_logical_delete_flag , 
 dw_modify_ts =  stg.dw_modify_ts 

when not matched then 
insert values (
  stg.orig_src_id , 
  stg.site_code , 
  stg.shift_load_id , 
  stg.shiftdate , 
  stg.dbprevious , 
  stg.dbnext , 
  stg.dbversion , 
  stg.shiftid , 
  stg.shift_dbname , 
  stg.dbkey , 
  stg.fieldid , 
  stg.fieldtruck , 
  stg.fieldexcav , 
  stg.fieldgrade , 
  stg.fieldloc , 
  stg.fielddumprec , 
  stg.fieldtons , 
  stg.fieldtimearrive , 
  stg.fieldtimearrive_ts , 
  stg.fieldtimeload , 
  stg.fieldtimeload_ts , 
  stg.fieldtimefull , 
  stg.fieldtimefull_ts , 
  stg.fieldcalctravtime , 
  stg.fieldcalctravtime_ts , 
  stg.fieldload , 
  stg.fieldextraload , 
  stg.fieldloadtype , 
  stg.fielddist , 
  stg.fieldefh , 
  stg.fieldtoper , 
  stg.fieldeoper , 
  stg.fieldorigasn , 
  stg.fieldreasnby , 
  stg.fieldpathtravtime , 
  stg.fieldlocactlc , 
  stg.fieldlocacttp , 
  stg.fieldlocactrl , 
  stg.fieldfirstdipper , 
  stg.fieldlastdipper , 
  stg.fieldbktcnt , 
  stg.fieldpandhbucketloads , 
  stg.fieldaudit , 
  stg.fieldweightst , 
  stg.fieldweightmeas , 
  stg.fieldmeasuretime , 
  stg.fieldgpsxtkl , 
  stg.fieldgpsytkl , 
  stg.fieldgpsxex , 
  stg.fieldgpsyex , 
  stg.fieldgpsstatex , 
  stg.fieldgpsstattk , 
  stg.fieldgpsheadtk , 
  stg.fieldgpsveltk , 
  stg.fieldpvs3id , 
  stg.fieldbktsum , 
  stg.fielddumpasn , 
  stg.fieldlsizetons , 
  stg.fieldlsizeid , 
  stg.fieldlsizeversion , 
  stg.fieldlsizedb , 
  stg.fieldfuelremain , 
  stg.fieldfactapply , 
  stg.fielddlock , 
  stg.fieldelock , 
  stg.fieldedlock , 
  stg.fieldrlock , 
  stg.fieldreconstat , 
  stg.fieldtimearrivemobile , 
  stg.fieldtimeloadmobile , 
  stg.fieldtimefullmobile , 
  stg.src_change_id , 
  stg.dw_logical_delete_flag , 
  stg.dw_modify_ts , 
  stg.dw_load_ts
';

snowflake.execute( {sqlText: var_sql_merge_base + ";"} ); 


var_sql_logical_delete_capture = 'update  edw_target.lh2_shift_load_b  
set 
dw_logical_delete_flag = stg.dw_logical_delete_flag , 
dw_modify_ts = stg. dw_modify_ts 
 from 
( select 
stg.site_code , 
stg.shift_load_id ,   
case  when stg.change_type in('D')     then
                      case 
                      when shift_info.shiftdate<(current_date-170) then 'A' 
                      else 'Y' ---handles  regular delete 
                      end               
    else 'U'---- for change type not in (i,u,d)
end as dw_logical_delete_flag,
stg.dw_modify_ts,  
stg.change_type
from edw_stage_016.lh2_shift_load stg 
left outer join pddw.lh2_shift_info shift_info
on (stg.site_code = shift_info.site_code and 
cast(substr(trim(stg.shift_load_id),1,9) as integer) = shift_info.shiftid) 
) as stg 
where 
stg.site_code = edw_target.lh2_shift_load_b.site_code and  
stg.shift_load_id = edw_target.lh2_shift_load_b.shift_load_id
and  stg.change_type ='D' ;
);
`
snowflake.execute( {sqlText: var_sql_logical_delete_capture + ";"} ); 

 }
catch (err)
     {
     return "Failed: " + err;   
     }
     $$;