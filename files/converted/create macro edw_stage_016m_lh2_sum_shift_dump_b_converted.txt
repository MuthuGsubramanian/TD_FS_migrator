CREATE OR REPLACE PROCEDURE "EDW_STAGE_016"."M_LH2_SUM_SHIFT_DUMP_B"()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
STRICT
EXECUTE AS OWNER// CREATE/CHANGE LOG : 
// DATE                  MOD BY                               GCC                           DESC
2020-01-09              TD_SF_Engine                          initial                      macro
//     **********************************************************************************************

AS
 $$
try {var_sql_merge_base = `merge into edw_target.lh2_sum_shift_dump_b as tgt 
using 
( 
select  
 stg.orig_src_id ,  
 stg.site_code ,  
 stg.sum_shift_dump_id ,  
  stg.shiftid ,
 stg.fulltravelnwtime ,  
 stg.queuenwtime ,  
 stg.dumpingnwtime ,  
 stg.prevloadid ,  
 stg.truckfulltimestamp ,  
 stg.truckoperid ,  
 coalesce(stg.materialmovementtype,' ') as materialmovementtype ,  
 coalesce(stg.materialmovementsubtype,' ') as materialmovementsubtype , 
stg.src_change_id ,  
 stg.dw_logical_delete_flag ,  
 stg.dw_modify_ts ,  
 stg.dw_load_ts   
from   edw_stage_016.lh2_sum_shift_dump as stg     
where stg.change_type in ('I','U')
) as stg 
on ( stg.site_code = tgt.site_code and 
stg.sum_shift_dump_id = tgt.sum_shift_dump_id)

when matched then 
update set 
 orig_src_id =  stg.orig_src_id , 
 shiftid = stg.shiftid ,
 fulltravelnwtime =  stg.fulltravelnwtime , 
 queuenwtime =  stg.queuenwtime , 
 dumpingnwtime =  stg.dumpingnwtime , 
 prevloadid =  stg.prevloadid , 
 truckfulltimestamp =  stg.truckfulltimestamp , 
 truckoperid =  stg.truckoperid , 
 materialmovementtype =  stg.materialmovementtype , 
 materialmovementsubtype =  stg.materialmovementsubtype ,
  src_change_id =  stg.src_change_id , 
 dw_logical_delete_flag =  stg.dw_logical_delete_flag , 
 dw_modify_ts =  stg.dw_modify_ts 

when not matched then 
insert values (
  stg.orig_src_id , 
  stg.site_code , 
  stg.sum_shift_dump_id , 
   stg.shiftid ,
   stg.fulltravelnwtime , 
  stg.queuenwtime , 
  stg.dumpingnwtime , 
  stg.prevloadid , 
  stg.truckfulltimestamp , 
  stg.truckoperid , 
  stg.materialmovementtype , 
  stg.materialmovementsubtype , 
  stg.src_change_id , 
  stg.dw_logical_delete_flag , 
  stg.dw_modify_ts , 
  stg.dw_load_ts
';

snowflake.execute( {sqlText: var_sql_merge_base + ";"} ); 


var_sql_logical_delete_capture = 'update  edw_target.lh2_sum_shift_dump_b  
set 
dw_logical_delete_flag = stg.dw_logical_delete_flag , 
dw_modify_ts = stg. dw_modify_ts 
 from 
( select stg.site_code , 
stg.sum_shift_dump_id ,   
case  when stg.change_type in('D')     then
                      case 
                      when shift_info.shiftdate<(current_date-170) then 'A' 
                      else 'Y' ---handles  regular delete 
                      end               
    else 'U'---- for change type not in (i,u,d)
end as dw_logical_delete_flag,
stg.dw_modify_ts,  
stg.change_type 
from edw_stage_016 .lh2_sum_shift_dump stg 
left outer join pddw.lh2_shift_info shift_info
on (stg.site_code = shift_info.site_code and 
stg.shiftid = shift_info.shiftid) 
) as stg 
where 
stg.site_code = edw_target.lh2_sum_shift_dump_b.site_code and  
stg.sum_shift_dump_id = edw_target.lh2_sum_shift_dump_b.sum_shift_dump_id and  
stg.change_type ='D' ;
);
`
snowflake.execute( {sqlText: var_sql_logical_delete_capture + ";"} ); 

 }
catch (err)
     {
     return "Failed: " + err;   
     }
     $$;