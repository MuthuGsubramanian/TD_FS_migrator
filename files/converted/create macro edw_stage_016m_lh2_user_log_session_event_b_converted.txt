CREATE OR REPLACE PROCEDURE "EDW_STAGE_016"."M_LH2_USER_LOG_SESSION_EVENT_B"()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
STRICT
EXECUTE AS OWNER// CREATE/CHANGE LOG : 
// DATE                  MOD BY                               GCC                           DESC
2020-01-09              TD_SF_Engine                          initial                      macro
//     **********************************************************************************************

AS
 $$
try {var_sql_merge_base = `merge into edw_target.lh2_user_log_session_event_b as tgt 
using 
( 
select  
	stg.orig_src_id ,  
	stg.site_code ,  
	stg.session_event_id ,  
	stg.shiftid , 
	stg.shiftdate ,
	stg.shiftindex  ,
	coalesce(stg.sessionid,' ') as sessionid ,  
	coalesce(stg.session_event_username,' ') as session_event_username ,  
	coalesce(stg.machinename,' ') as machinename ,  
	stg.applicationtypeid ,  
	coalesce(stg.applicationversion,' ') as applicationversion ,  
	stg.eventtypeid ,  
	stg.eventtime ,  
	coalesce(stg.dispatcherprofile,' ') as dispatcherprofile ,  
	coalesce(stg.primarydispatcher,' ') as primarydispatcher ,  
	stg.src_change_id ,  
	stg.dw_logical_delete_flag ,  
	stg.dw_modify_ts ,  
	stg.dw_load_ts   
from   edw_stage_016.lh2_user_log_session_event as stg 
where stg.change_type in ('I','U')
) as stg 
on ( stg.site_code = tgt.site_code and 
stg.session_event_id = tgt.session_event_id )

when matched then 
update set 
 orig_src_id =  stg.orig_src_id , 
 shiftid =  stg.shiftid , 
 shiftdate =  stg.shiftdate , 
 shiftindex =  stg.shiftindex , 
 sessionid =  stg.sessionid , 
 session_event_username =  stg.session_event_username , 
 machinename =  stg.machinename , 
 applicationtypeid =  stg.applicationtypeid , 
 applicationversion =  stg.applicationversion , 
 eventtypeid =  stg.eventtypeid , 
 eventtime =  stg.eventtime , 
 dispatcherprofile =  stg.dispatcherprofile , 
 primarydispatcher =  stg.primarydispatcher , 
 src_change_id =  stg.src_change_id , 
 dw_logical_delete_flag =  stg.dw_logical_delete_flag , 
 dw_modify_ts =  stg.dw_modify_ts 

when not matched then 
insert values (
  stg.orig_src_id , 
  stg.site_code , 
  stg.session_event_id , 
  stg.shiftid , 
  stg.shiftdate , 
  stg.shiftindex , 
  stg.sessionid , 
  stg.session_event_username , 
  stg.machinename , 
  stg.applicationtypeid , 
  stg.applicationversion , 
  stg.eventtypeid , 
  stg.eventtime , 
  stg.dispatcherprofile , 
  stg.primarydispatcher , 
  stg.src_change_id , 
  stg.dw_logical_delete_flag , 
  stg.dw_modify_ts , 
  stg.dw_load_ts
';

snowflake.execute( {sqlText: var_sql_merge_base + ";"} ); 


var_sql_logical_delete_capture = 'update  edw_target.lh2_user_log_session_event_b 
set 
dw_logical_delete_flag = stg.dw_logical_delete_flag , 
dw_modify_ts = stg.dw_modify_ts 
 from 
(
 select stg.site_code , 
 stg.session_event_id ,  
 stg.shiftid , 
 case  when stg.change_type in('D')     then
                      case 
                      when stg.shiftdate<(current_date-170) then 'A' 
                      else 'Y' ---handles  regular delete 
                      end               
    else 'U'---- for change type not in (i,u,d)
end as dw_logical_delete_flag,
stg.dw_modify_ts,  
stg.change_type 
from edw_stage_016.lh2_user_log_session_event stg 
) as stg 
where 
stg.site_code = edw_target.lh2_user_log_session_event_b .site_code and  
stg.session_event_id = edw_target.lh2_user_log_session_event_b .session_event_id and  
stg.change_type ='D' ;
);`
snowflake.execute( {sqlText: var_sql_logical_delete_capture + ";"} ); 

 }
catch (err)
     {
     return "Failed: " + err;   
     }
     $$;