CREATE OR REPLACE PROCEDURE "EDW_STAGE_016"."M_LH2_SHIFT_EQMT_B"()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
STRICT
EXECUTE AS OWNER// CREATE/CHANGE LOG : 
// DATE                  MOD BY                               GCC                           DESC
2020-01-09              TD_SF_Engine                          initial                      macro
//     **********************************************************************************************

AS
 $$
try {var_sql_merge_base = `merge into edw_target.lh2_shift_eqmt_b as tgt 
using 
( 
select  
 stg.orig_src_id ,  
 stg.site_code ,  
 stg.shift_eqmt_id ,  
 to_date(trim(substr(cast (stg.shiftid as varchar(30)),1,length(cast (stg.shiftid as varchar(30)))-3)),'yymmdd') as shiftdate ,  
 stg.dbprevious ,  
 stg.dbnext ,  
 stg.dbversion ,  
 stg.shiftid ,  
 coalesce(stg.shift_dbname,' ') as shift_dbname ,  
 stg.dbkey ,  
 coalesce(stg.fieldid,' ') as fieldid ,  
 stg.fieldpit ,  
 stg.fieldregionlock ,  
 stg.fieldsize ,  
 stg.fieldtmph ,  
 stg.fieldreason ,  
 stg.fieldunit ,  
 stg.fieldstatus ,  
 stg.fieldextraload ,  
 stg.fieldnoassign ,  
 stg.fieldloadstart ,  
 stg.fieldeqmttype ,  
 coalesce(stg.fieldcomment,' ') as fieldcomment ,  
 stg.fieldreasonrec ,  
 stg.fieldoper ,  
 stg.fieldaudit ,  
 stg.fieldsubcode ,  
 stg.fieldsubcode2 ,  
 coalesce(stg.fieldsituation,' ') as fieldsituation ,  
 stg.fielduser ,  
 stg.fieldmaintstart ,  
 stg.fieldmaintpropose ,  
 stg.fieldwarranty ,  
 stg.fieldenghr ,  
 stg.fieldenghr2 ,  
 stg.fieldenghrtime ,  
(cast (date '1970-01-01' +  cast (floor( cast ( fieldenghrtime  as float) / 86400) as integer) as timestamp (0))
+ (  (  ( cast ( fieldenghrtime   as number) mod cast (86400 as number) )) * interval '00:00:01' hour to second))  as fieldenghrtime_ts ,  
 stg.fieldenghrtime2 ,  
(cast (date '1970-01-01' +  cast (floor( cast ( fieldenghrtime2  as float) / 86400) as integer) as timestamp (0))
+ (  (  ( cast ( fieldenghrtime2   as number) mod cast (86400 as number) )) * interval '00:00:01' hour to second)) as fieldenghrtime2_ts ,  
 stg.fieldisauxil ,  
 coalesce(stg.fieldpmid,' ') as fieldpmid ,  
 stg.src_change_id ,  
 stg.dw_logical_delete_flag ,  
 stg.dw_modify_ts ,  
 stg.dw_load_ts   
from   edw_stage_016.lh2_shift_eqmt as stg  
left outer join pddw.lh2_shift_info shift_info
on (stg.site_code = shift_info.site_code and 
stg.shiftid = shift_info.shiftid )   
where stg.change_type in ('I','U')
) as stg 
on ( stg.site_code = tgt.site_code and 
stg.shift_eqmt_id = tgt.shift_eqmt_id 
and stg.shiftid = tgt.shiftid )

when matched then 
update set 
 orig_src_id =  stg.orig_src_id , 
 shiftdate =  stg.shiftdate , 
 dbprevious =  stg.dbprevious , 
 dbnext =  stg.dbnext , 
 dbversion =  stg.dbversion , 
 shift_dbname =  stg.shift_dbname , 
 dbkey =  stg.dbkey , 
 fieldid =  stg.fieldid , 
 fieldpit =  stg.fieldpit , 
 fieldregionlock =  stg.fieldregionlock , 
 fieldsize =  stg.fieldsize , 
 fieldtmph =  stg.fieldtmph , 
 fieldreason =  stg.fieldreason , 
 fieldunit =  stg.fieldunit , 
 fieldstatus =  stg.fieldstatus , 
 fieldextraload =  stg.fieldextraload , 
 fieldnoassign =  stg.fieldnoassign , 
 fieldloadstart =  stg.fieldloadstart , 
 fieldeqmttype =  stg.fieldeqmttype , 
 fieldcomment =  stg.fieldcomment , 
 fieldreasonrec =  stg.fieldreasonrec , 
 fieldoper =  stg.fieldoper , 
 fieldaudit =  stg.fieldaudit , 
 fieldsubcode =  stg.fieldsubcode , 
 fieldsubcode2 =  stg.fieldsubcode2 , 
 fieldsituation =  stg.fieldsituation , 
 fielduser =  stg.fielduser , 
 fieldmaintstart =  stg.fieldmaintstart , 
 fieldmaintpropose =  stg.fieldmaintpropose , 
 fieldwarranty =  stg.fieldwarranty , 
 fieldenghr =  stg.fieldenghr , 
 fieldenghr2 =  stg.fieldenghr2 , 
 fieldenghrtime =  stg.fieldenghrtime , 
 fieldenghrtime_ts =  stg.fieldenghrtime_ts , 
 fieldenghrtime2 =  stg.fieldenghrtime2 , 
 fieldenghrtime2_ts =  stg.fieldenghrtime2_ts , 
 fieldisauxil =  stg.fieldisauxil , 
 fieldpmid =  stg.fieldpmid , 
 src_change_id =  stg.src_change_id , 
 dw_logical_delete_flag =  stg.dw_logical_delete_flag , 
 dw_modify_ts =  stg.dw_modify_ts 

when not matched then 
insert values (
  stg.orig_src_id , 
  stg.site_code , 
  stg.shift_eqmt_id , 
  stg.shiftdate , 
  stg.dbprevious , 
  stg.dbnext , 
  stg.dbversion , 
  stg.shiftid , 
  stg.shift_dbname , 
  stg.dbkey , 
  stg.fieldid , 
  stg.fieldpit , 
  stg.fieldregionlock , 
  stg.fieldsize , 
  stg.fieldtmph , 
  stg.fieldreason , 
  stg.fieldunit , 
  stg.fieldstatus , 
  stg.fieldextraload , 
  stg.fieldnoassign , 
  stg.fieldloadstart , 
  stg.fieldeqmttype , 
  stg.fieldcomment , 
  stg.fieldreasonrec , 
  stg.fieldoper , 
  stg.fieldaudit , 
  stg.fieldsubcode , 
  stg.fieldsubcode2 , 
  stg.fieldsituation , 
  stg.fielduser , 
  stg.fieldmaintstart , 
  stg.fieldmaintpropose , 
  stg.fieldwarranty , 
  stg.fieldenghr , 
  stg.fieldenghr2 , 
  stg.fieldenghrtime , 
  stg.fieldenghrtime_ts , 
  stg.fieldenghrtime2 , 
  stg.fieldenghrtime2_ts , 
  stg.fieldisauxil , 
  stg.fieldpmid , 
  stg.src_change_id , 
  stg.dw_logical_delete_flag , 
  stg.dw_modify_ts , 
  stg.dw_load_ts
';

snowflake.execute( {sqlText: var_sql_merge_base + ";"} ); 


var_sql_logical_delete_capture = 'update  edw_target.lh2_shift_eqmt_b  
set 
dw_logical_delete_flag = stg.dw_logical_delete_flag , 
dw_modify_ts = stg. dw_modify_ts 
 from 
( select stg.site_code , 
stg.shift_eqmt_id ,   
case  when stg.change_type in('D')     then
                      case 
                      when shift_info.shiftdate<(current_date-170) then 'A' 
                      else 'Y' ---handles  regular delete 
                      end               
    else 'U'---- for change type not in (i,u,d)
end as dw_logical_delete_flag,
stg.dw_modify_ts,  
stg.change_type
from edw_stage_016.lh2_shift_eqmt stg 
left outer join pddw.lh2_shift_info shift_info
on (stg.site_code = shift_info.site_code and 
cast(substr(trim(stg.shift_eqmt_id),1,9) as integer) = shift_info.shiftid) 
) as stg 
where 
stg.site_code = edw_target.lh2_shift_eqmt_b.site_code and  
stg.shift_eqmt_id = edw_target.lh2_shift_eqmt_b.shift_eqmt_id and  
stg.change_type ='D' ;
);
`
snowflake.execute( {sqlText: var_sql_logical_delete_capture + ";"} ); 

 }
catch (err)
     {
     return "Failed: " + err;   
     }
     $$;