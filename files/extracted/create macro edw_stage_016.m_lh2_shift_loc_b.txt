
"Request Text"
create  macro  edw_stage_016.m_lh2_shift_loc_b
as
(
merge into edw_target.lh2_shift_loc_b as tgt 
using 
( 
select  
 stg.orig_src_id ,  
 stg.site_code ,  
 stg.shift_loc_id ,  
 to_date(trim(substr(cast (stg.shiftid as varchar(30)),1,length(cast (stg.shiftid as varchar(30)))-3)),'yymmdd') as shiftdate ,  
 stg.dbprevious ,  
 stg.dbnext ,  
 stg.dbversion ,  
 stg.shiftid ,  
 coalesce(stg.shift_dbname,' ') as shift_dbname ,  
 stg.dbkey ,  
 coalesce(stg.fieldid,' ') as fieldid ,  
 stg.fieldpit ,  
 stg.fieldregion ,  
 stg.fieldelev ,  
 stg.fieldunit ,  
 stg.fieldaudit ,  
 coalesce(stg.fieldmetadata,' ') as fieldmetadata ,  
 stg.src_change_id ,  
 stg.dw_logical_delete_flag ,  
 stg.dw_modify_ts ,  
 stg.dw_load_ts   
from   edw_stage_016.lh2_shift_loc as stg 
left outer join pddw.lh2_shift_info shift_info
on (stg.site_code = shift_info.site_code and 
stg.shiftid = shift_info.shiftid )   
where stg.change_type in ('I','U')
) as stg 
on ( stg.site_code = tgt.site_code and 
stg.shift_loc_id = tgt.shift_loc_id 
and stg.shiftid = tgt.shiftid )

when matched then 
update set 
 orig_src_id =  stg.orig_src_id , 
 shiftdate =  stg.shiftdate , 
 dbprevious =  stg.dbprevious , 
 dbnext =  stg.dbnext , 
 dbversion =  stg.dbversion , 
 shift_dbname =  stg.shift_dbname , 
 dbkey =  stg.dbkey , 
 fieldid =  stg.fieldid , 
 fieldpit =  stg.fieldpit , 
 fieldregion =  stg.fieldregion , 
 fieldelev =  stg.fieldelev , 
 fieldunit =  stg.fieldunit , 
 fieldaudit =  stg.fieldaudit , 
 fieldmetadata =  stg.fieldmetadata , 
 src_change_id =  stg.src_change_id , 
 dw_logical_delete_flag =  stg.dw_logical_delete_flag , 
 dw_modify_ts =  stg.dw_modify_ts 

when not matched then 
insert values (
  stg.orig_src_id , 
  stg.site_code , 
  stg.shift_loc_id , 
  stg.shiftdate , 
  stg.dbprevious , 
  stg.dbnext , 
  stg.dbversion , 
  stg.shiftid , 
  stg.shift_dbname , 
  stg.dbkey , 
  stg.fieldid , 
  stg.fieldpit , 
  stg.fieldregion , 
  stg.fieldelev , 
  stg.fieldunit , 
  stg.fieldaudit , 
  stg.fieldmetadata , 
  stg.src_change_id , 
  stg.dw_logical_delete_flag , 
  stg.dw_modify_ts , 
  stg.dw_load_ts);
--  step 2 ( for  deleted  records)
--  it  is based on incrementaly  loaded records in  stage
--  includes all the change type   ---   d
update  edw_target.lh2_shift_loc_b  
from 
( select stg.site_code , 
stg.shift_loc_id ,   
case  when stg.change_type in('D')     then
                       case 
                      when shift_info.shiftdate<(current_date-170) then 'A' 
                      else 'Y' ---handles  regular delete 
                      end               
    else 'U'---- for change type not in (i,u,d)
end as dw_logical_delete_flag,stg.dw_modify_ts,  stg.change_type
from edw_stage_016.lh2_shift_loc stg 
left outer join pddw.lh2_shift_info shift_info
on (stg.site_code = shift_info.site_code and 
cast(substr(trim(stg.shift_loc_id),1,9) as integer) = shift_info.shiftid) 
) as stg 
set 
dw_logical_delete_flag = stg.dw_logical_delete_flag , 
dw_modify_ts = stg. dw_modify_ts 
where 
stg.site_code = edw_target.lh2_shift_loc_b.site_code and  
stg.shift_loc_id = edw_target.lh2_shift_loc_b.shift_loc_id
and  stg.change_type ='D' ;
);
